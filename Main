// Integral Calculator.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <iostream>

double trapazoidalmethod(double lowerboundry, double upperboundry, double parition);
/*{
	double delta;
	delta = (upperboundry -  lowerboundry) / parition;
	double xone;
	double xtwo;
	xone = lowerboundry;
	xtwo = lowerboundry + delta;
	int counter;
	counter = 1;
	double partialsum;
	double totalsum;
	totalsum = 0;
	while (counter <= parition)
	{
		partialsum = delta * (pow(xone, 2) + pow(xtwo, 2)) / 2;
		totalsum =totalsum +  partialsum ;
		xone = xtwo;
		xtwo = xtwo + delta;
		counter++;
	}
	return totalsum;
}*/

double midpointmethod(double lowerboundry, double upperboundry, double parition);
/*{

}*/

double simpsonsmethod(double Trapeziumvalue, double Midpointvalue);
/*{

}*/
int main()
{
	double lowerboundry;
	double upperboundry;
	int parition;
	std::cout << "Enter the lower boundry" << std::endl;
	std::cin >> lowerboundry;
	std::cout << "Enter the upper boundry" << std::endl;
	std::cin >> upperboundry;
	std::cout << "Enter the number of ways to divide the boundry" << std::endl;
	std::cin >> parition;
	std::cout << trapazoidalmethod(lowerboundry,upperboundry,parition)<< " is the trapezium rule approximation for the integral" <<std::endl;
	std::cout << midpointmethod(lowerboundry, upperboundry, parition) << " is the midpoint rule approximation for the integral" << std::endl;
	std::cout << simpsonsmethod(trapazoidalmethod(lowerboundry, upperboundry, parition), midpointmethod(lowerboundry, upperboundry, parition)) << " is the simpsons rule approximation for the integtal" << std::endl;
	return 0;
}
